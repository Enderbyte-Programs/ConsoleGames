How to Mod this program
1. Create code

    1a. Create a new file in enderbyteprograms/consolegames/games
    1b. Use the applicable package statement
    1c. the class must be "public class <NAME> implements Game" so it can be correctly registered.
    1d. The point of execution for your game will be in the function "public static int play()". (Return 0 on sucess, 1 on error)
    1e. It is recommended to surround your play() function in a try-catch and catch ambiguos exceptions just in case. On an ambiguous Exception, return 1 after calling shared.defaultCrashHandler(). This will give a crash message to the user.
    If you need a code example, check out testgame.java.

    Another mandatory function is init(). This code will be run on program start and must

        register game.name in shared.myoptions (shared.myoptions.add(name);)
        register configs (if applicable) [see section 3]
        register statics (if applicable) [see section 4]
        Create a documentation (if applicable)

2. Register game (sadly requires mixins)

    2a. Using mixins, add to the END of the init() funtion in Main
    shared.games.add(new <yourgame>());
    

3. Register Configurations (If applicable)

    3a. In your game's init() function, add the following
    REMEMBER: shared.configdat is the Cfile() instance that holds all Configurations
    3b. Check if the config is in the file with shared.configdat.cexists()
    If it doesn't register a new Cnode() with shared.configdat.newNode(). Cnode() is not meant to be standalone. The code is (name,defaultdata,usenum). 
    3c. Once all Configurations are registered, they will automatically appear in the Options menu.

    Within your game, Call your configurations with shared.configdat.findbyname(name).data
    DO NOT register configurations in the cfg() function unless they are needed BEFORE YOUR GAME INITIALIZES (unlikely). only SYSTEM CONFIGS go here.

4. Register statistics (If applicable, do not use if you have no statistics to show)

    4a. At the top of your class, put "private sgroup s = new sgroup(name)" (You must import enderbyteprograms.consolegames.stats.sgroup). Your name must not be set to "Back","Exit", or "System".
    4b. Go to your init() function.
    4c. After the shared.myoptions.add(name), create the statistics nodes. They will be automatically saved. 
    4d. Make a node with s.newnode(String name, double startvalue).
    4e. AFTER you have added your nodes, register the statistics group to the statistics file class.
    4f. Do this with shared.stats.register(e).

    Call your statistics with s.locate(name). THE NAMES MUST MUCH OTHERWISE AN ArrayOutOfBoundsException will be thrown.

    Edit your statistics by NOT CALLING THEM NOT STATICALLY. This means it means 2 lines of code. 
        4h.i.  snode _s = s.locate(name);
        4h.ii. _s.set(newvalue);

    4i. Inside stats.txt, statistics are structured group;name=value (Just in case you need to edit them manually which you shouldn't have to do.)
    4j. Once the program is started, statistics are loaded in to memory and not read again. Statistics are automatically saved when you return to the main menu. If you need to do this previously, call shared.stats.save().